# arguments
platform = linux/x64



# paths home
project_home       = ..
bin_dir            = $(project_home)/lib/$(platform)
object_dir         = $(project_home)/.objs



# includes of aes_ecb headers
aes_ecb_inc_path   = $(project_home)/inc
aes_ecb_includes   = -I$(aes_ecb_inc_path)



# all includes that aes_ecb solution needs
includes           = $(aes_ecb_includes)



# source files of aes_ecb project
aes_ecb_src_path   = $(project_home)/src
aes_ecb_source     = $(filter %.cpp, $(shell find $(aes_ecb_src_path) -depth -name "*.cpp"))



# objects of aes_ecb solution
aes_ecb_objects    = $(aes_ecb_source:$(project_home)%.cpp=$(object_dir)%.o)



# output librarys
aes_ecb_output_lib = $(bin_dir)/libaes_ecb.so



# my g++ not support nullptr and 64bits
# so no -m64, and add a macro -Dnullptr=0

# build flags for objects
build_obj_flags    = -std=c++0x -g -Wall -O1 -pipe -fPIC -Dnullptr=0

# build flags for execution
build_exec_flags   = $(build_obj_flags)

# build flags for dynamic link librarys
build_so_flags     = -shared



# build targets
targets            = aes_ecb

# let 'build' be default target, build all targets
build    : $(targets)

aes_ecb      : $(aes_ecb_objects)
	@echo
	@echo "@@@@@  start making aes_ecb  @@@@@"
	g++ $(build_so_flags) -o $(aes_ecb_output_lib) $^
	@echo "@@@@@  make aes_ecb success  @@@@@"
	@echo

# build all objects
$(object_dir)/%.o:$(project_home)/%.cpp
	@dir=`dirname $@`;      \
    if [ ! -d $$dir ]; then \
        mkdir -p $$dir;     \
    fi
	g++ -c $(build_obj_flags) $(includes) -o $@ $<

clean    :
	rm -rf $(object_dir) $(aes_ecb_output_lib)

rebuild  : clean build
